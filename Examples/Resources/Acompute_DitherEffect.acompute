#kernel Dither

layout(rgba16f, set = 0, binding = 0) uniform image2D _RenderTarget;
layout(binding = 1) uniform UniformBufferObject 
{
	float _DitherStrength;
	float _NumColors;
	float _DitherSize;
	bool _UseGrayscaleDither;
};

layout(push_constant, std430) uniform Params 
{
	vec2 raster_size;
};

// 4x4 Bayer matrix used by the dither
const mat4 bayer4x4 = mat4(
	vec4(0.0, 0.5333333333, 0.1333333333,  0.6666666667),
	vec4(0.8, 0.2666666667, 0.9333333333,  0.4),
	vec4(0.2, 0.7333333333, 0.06666666667, 0.6),
	vec4(1.0, 0.4666666667, 0.8666666667,  0.3333333333)
);

float DitherValue(float value, ivec2 pixelPos)
{
	value *= float(_NumColors);
	float floorValue = floor(value);
	
	float delta = value - floorValue;
	float edge = bayer4x4[pixelPos.x % 4][pixelPos.y % 4];
	
	return (floorValue + step(edge,delta)) / float(_NumColors);
}

[numthreads(8, 8, 1)]
void Dither() 
{
	ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = ivec2(raster_size);
	vec2 screen_uv = uv / size;
	
	vec3 screenColor = imageLoad(_RenderTarget, uv).rgb;
	ivec2 ditherCoords = uv / int(_DitherSize);
		
	float dr = DitherValue(screenColor.r, ditherCoords );
	float dg = DitherValue(screenColor.g, ditherCoords );
	float db = DitherValue(screenColor.b, ditherCoords );
	vec3 colorDither = vec3(dr, dg, db);
	
	vec3 finalColor = mix(screenColor, colorDither, _DitherStrength);
	if(_UseGrayscaleDither)
	{
	    vec3 lum = vec3(0.299, 0.587, 0.114);
		float grayscale = dot(lum, screenColor);
		float grayscaleDither = DitherValue(grayscale, ditherCoords);
		finalColor = mix(screenColor, vec3(grayscaleDither), _DitherStrength);
	}
	imageStore(_RenderTarget, uv, vec4(finalColor , 1.0));
}